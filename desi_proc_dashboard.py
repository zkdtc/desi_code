import argparse
import os,glob
import fitsio
import astropy.io.fits as pyfits
from astropy.io import fits
import subprocess
import pandas as pd
import time,datetime
import numpy as np
import psycopg2
import hashlib
import pdb
import psutil
from os import listdir

class DESI_PROC_DASHBOARD(object):
    """ Code to generate the statistic of desi_pipe production status   
    Usage:
    python3 desi_proc_dashboard.py --night [20191126] --n_night 10 --prod_dir /global/cscratch1/sd/zhangkai/desi/ --output_dir /global/project/projectdirs/desi/www/users/zhangkai/desi_proc_dashboard/ --output_url https://portal.nersc.gov/project/desi/users/zhangkai/desi_proc_dashboard/
    """

    def __init__(self):
        ############
        ## Input ###
        ############
        parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
        parser = self._init_parser(parser)
        args = parser.parse_args()
        if not os.getenv('DESI_SPECTRO_REDUX'):
            os.environ['DESI_SPECTRO_REDUX']='/global/project/projectdirs/desi/spectro/redux/'
            os.environ['DESI_SPECTRO_DATA']='/global/project/projectdirs/desi/spectro/data/'
        if args.nights=='all':
            nights=listdir(os.getenv('DESI_SPECTRO_REDUX')+'/daily/exposures/')
            nights=[int(x) for x in nights]
        else:
            try:
                loc=locals()
                cmd='nights='+args.nights
                a=exec(cmd)
                nights=loc['nights']
            except:
                nights=[]

        tonight=self.what_night_is_it()
        if not tonight in nights:
            nights.append(tonight)
        nights.sort(reverse=True)
        if int(args.n_night)<=len(nights):
            nights=nights[0:int(args.n_night)-1]

        prod_dir=args.prod_dir # base directory of product
        self.output_dir=args.output_dir # Portal directory for output html files
        self.output_url=args.output_url # corresponding URL

        ######################################################################
        ## sub directories. Should not change if generated by the same code ##
        ## that follows the same directory strucure ##
        ######################################################################
        self.data_dir=prod_dir+"/spectro/data/"
        self.log_dir=prod_dir+"/spectro/redux/daily/run/logs"
        self.redux_dir=prod_dir+"/spectro/redux/daily"

        strTable=self._initialize_page()

        for night in nights:
            #print(night)
            stat_night=self.calculate_one_night(night)
            ####################################
            #### Table for individual night ####
            ####################################
            strTable=strTable+self._add_html_table(stat_night,str(night))
            
        timestamp=time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
        #print(timestamp)
        running=self.check_running()
        strTable=strTable+"<div style='color:#00FF00'>"+timestamp+" "+"desi_dailyproc running: "+running+"</div>"
        strTable=strTable+self._add_js_script1()
        strTable=strTable+"</html>"
        hs=open(self.output_dir+"desi_proc_dashboard.html",'w')
        hs.write(strTable)
        hs.close()

        ##########################
        #### Fix Permission ######
        ##########################
        cmd="chmod -R a+xr "+self.output_dir
        os.system(cmd)

    def _init_parser(self,parser):
        parser.add_argument('-n','--nights', type=str, default = None, required = False, help="nights to monitor")
        parser.add_argument('-nn','--n_night', type=str, default = None, required = False, help="all:all nights. ifdigit: the last n nights.")
        parser.add_argument('-pd','--prod_dir', type=str, default = None, required = True, help="product base directory")
        parser.add_argument('-od','--output_dir', type=str, default = None, required = True, help="output portal directory for the html pages ")
        parser.add_argument('-ou','--output_url', type=str, default = None, required = True, help="output portal directory url ")
        return parser

    def calculate_one_night(self,night):
        #print('{} Checking for new files on {}'.format(time.asctime(), night))
        fileglob = '{}/{}/*/desi-*.fits.fz'.format(os.getenv('DESI_SPECTRO_DATA'), night)
        known_exposures = set()
        newexp = self.find_newexp(night, fileglob, known_exposures)
        expids=[t[1] for t in newexp]
        expids.sort(reverse=True)
        output={}
        for expid in expids:
            # Check the redux folder for reduced files 
            filename=os.getenv('DESI_SPECTRO_DATA')+'/'+str(night)+'/'+str(expid).zfill(8)+'/desi-'+str(expid).zfill(8)+'.fits.fz'
            #h1=fitsio.read_header(filename,1)
            h1=fits.getheader(filename,1)
            flavor=h1['flavor'].strip()
            #import pdb;pdb.set_trace()
            try:
                a= h1['SPCGRPHS']
                b=a.split(',')
            except:
                a='SPX'
                b=['SPX']
            n_spectrographs=len(b)

            exptime=str(h1['EXPTIME']).strip()
            try:
                obstype=h1['OBSTYPE'].strip()
            except:
                obstype='None' #h2=fitsio.read_header(filename,2)
            #print(expid,flavor,obstype)
            fileglob_psf='/project/projectdirs/desi/spectro/redux/daily/exposures/'+str(night)+'/'+str(expid).zfill(8)+'/psf*.fits'
            fileglob_fit_psf='/project/projectdirs/desi/spectro/redux/daily/exposures/'+str(night)+'/'+str(expid).zfill(8)+'/fit-psf*.fits'
            fileglob_fiberflat='/project/projectdirs/desi/spectro/redux/daily/exposures/'+str(night)+'/'+str(expid).zfill(8)+'/fiberflat*.fits'
            fileglob_frame='/project/projectdirs/desi/spectro/redux/daily/exposures/'+str(night)+'/'+str(expid).zfill(8)+'/frame*.fits'
            fileglob_sframe='/project/projectdirs/desi/spectro/redux/daily/exposures/'+str(night)+'/'+str(expid).zfill(8)+'/sframe*.fits'
            fileglob_cframe='/project/projectdirs/desi/spectro/redux/daily/exposures/'+str(night)+'/'+str(expid).zfill(8)+'/cframe*.fits'
            fileglob_sky='/project/projectdirs/desi/spectro/redux/daily/exposures/'+str(night)+'/'+str(expid).zfill(8)+'/sky*.fits'
            file_psf=sorted(glob.glob(fileglob_psf))
            file_fit_psf=sorted(glob.glob(fileglob_fit_psf))
            file_fiberflat=sorted(glob.glob(fileglob_fiberflat))
            file_frame=sorted(glob.glob(fileglob_frame))
            file_sframe=sorted(glob.glob(fileglob_sframe))
            file_cframe=sorted(glob.glob(fileglob_cframe))
            file_sky=sorted(glob.glob(fileglob_sky))
            #import pdb;pdb.set_trace()
            #print(len(file_psf),len(file_fiberflat),len(file_frame),len(file_sframe),len(file_cframe),len(file_sky))
            output[str(expid)]={'FLAVOR':flavor,'OBSTYPE':obstype,'EXPTIME':exptime,'SPECTROGRAPHS':a,'n_spectrographs':n_spectrographs,'n_psf':len(file_psf)+len(file_fit_psf),'n_ff':len(file_fiberflat),'n_frame':len(file_frame),'n_sframe':len(file_sframe),'n_cframe':len(file_cframe),'n_sky':len(file_sky)}
        return(output)

    def _initialize_page(self):
        #strTable="<html><style> table {font-family: arial, sans-serif;border-collapse: collapse;width: 100%;}"
        #strTable=strTable+"td, th {border: 1px solid #dddddd;text-align: left;padding: 8px;}"
        #strTable=strTable+"tr:nth-child(even) {background-color: #dddddd;}</style>"
        strTable="""<html><style>
        h1 {font-family: 'sans-serif';font-size:50px;color:#4CAF50}
        #c {font-family: 'Trebuchet MS', Arial, Helvetica, sans-serif;border-collapse: collapse;width: 100%;}
        #c td, #c th {border: 1px solid #ddd;padding: 8px;}
        #c tr:nth-child(even){background-color: #f2f2f2;}
        #c tr:hover {background-color: #ddd;}
        #c th {padding-top: 12px;  padding-bottom: 12px;  text-align: left;  background-color: #4CAF50;  color: white;}
        .collapsible {background-color: #eee;color: #444;cursor: pointer;padding: 18px;width: 100%;border: none;text-align: left;outline: none;font-size: 25px;}
        .regular {background-color: #eee;color: #444;  cursor: pointer;  padding: 18px;  width: 25%;  border: 18px;  text-align: left;  outline: none;  font-size: 25px;}
        .active, .collapsible:hover {  background-color: #ccc;}
        .content {padding: 0 18px;display: table;overflow: hidden;background-color: #f1f1f1;maxHeight:0px;}
        /* The Modal (background) */
        .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 90%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
        }

        /* Modal Content */
        .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        }
        

       /* The Close Button */
       .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        }
        .close:hover,
        .close:focus {
             color: #000;
             text-decoration: none;
             cursor: pointer;
         }
        </style>
        <h1>DESI PROC STATUS MONITOR</h1>"""

        return strTable

    def _add_html_table(self,table,night):
        heading="Night "+night
        strTable="<button class='collapsible'>"+heading+"</button><div class='content' style='display:inline-block;min-height:0%;'>"
        strTable = strTable+"<table id='c'><tr><th>Expid</th><th>FLAVOR</th><th>OBSTYPE</th><th>EXPTIME</th><th>SPECTROGRAGHS</th><th>PSF File</th><th>FFlat file</th><th>frame file</th><th>sframe file</th><th>sky file</th><th>cframe file</th></tr>"
        for i in range(len(table)):
            expid=list(table.keys())[i]
            n_expected=0
            if True:
                obstype=str(table[expid]['OBSTYPE']).upper().strip()
                n_spectrographs=int(table[expid]['n_spectrographs'])
                if obstype=='ZERO':
                    n_ref=[str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0)]
                elif obstype=='ARC':
                    n_ref=[str(n_spectrographs*3),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0)]
                elif obstype=='FLAT':
                    n_ref=[str(n_spectrographs*3),str(n_spectrographs*3),str(n_spectrographs*3),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0)]
                elif obstype=='SKY' or obstype=='SCIENCE' or obstype=='NONE':
                    n_ref=[str(n_spectrographs*3),str(n_spectrographs*0),str(n_spectrographs*3),str(n_spectrographs*3),str(n_spectrographs*3),str(n_spectrographs*3)]
                elif obstype=='TWILIGHT':
                    n_ref=[str(n_spectrographs*3),str(n_spectrographs*0),str(n_spectrographs*3),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0)]
                else:
                    n_ref=[str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0)]

                color="green"
                str_row="<tr><td>"+expid+"</td><td>"+str(table[expid]['FLAVOR'])+"</td><td>"+str(table[expid]['OBSTYPE'])+"</td><td>"+str(table[expid]['EXPTIME'])+"</td><td>"+table[expid]['SPECTROGRAPHS']+"</td><td>"+str(table[expid]['n_psf'])+'/'+n_ref[0]+"</td><td>"+str(table[expid]['n_ff'])+'/'+n_ref[1]+"</td><td>"+str(table[expid]['n_frame'])+'/'+n_ref[2]+"</td><td>"+str(table[expid]['n_sframe'])+'/'+n_ref[3]+"</td><td>"+str(table[expid]['n_sky'])+'/'+n_ref[4]+"</td><td>"+str(table[expid]['n_cframe'])+'/'+n_ref[5]+"</td></tr>"
                strTable=strTable+str_row
            else:
                pass
        strTable=strTable+"</table></div>"
        return strTable

    def _add_html_table_with_link(self,table,heading):
        strTable="<h2>"+heading+"</h2>"
        strTable = strTable+"<table id='c'><tr><th>Tasktype</th><th>waiting</th><th>ready</th><th>running</th><th>done</th><th>failed</th><th>submit</th></tr>"
        for i in range(len(table)):
            tasktype=self.tasktype_arr[i]
            n_expected=0
            try:
                loc=locals()
                cmd="n_expected=self.file_count['overall']['"+tasktype+"']"
                a=exec(cmd)
                n_expected=loc['n_expected']
                fraction=np.array(float(table[i][3]))/np.array(float(n_expected))
                color="green"
                if fraction<1.0:
                    color="red"
            except:
                color="red"

            if table[i][4]==0:   
                str_row="<tr><td>"+self.tasktype_arr[i]+"</td><td>"+str(table[i][0])+"</td><td>"+str(table[i][1])+"</td><td>"+str(table[i][2])+"</td><td>"+str(table[i][3])+"&#x0002F;"+str(n_expected)+"&nbsp;<font color='"+color+"'>&#x00028;"+str(fraction)[0:5]+"&#x00029;</font>"+"</td><td>"+str(table[i][4])+"</td><td>"+str(table[i][5])+"</td></tr>"
            else:     # Add href link here:
                str_row="<tr><td>"+self.tasktype_arr[i]+"</td><td>"+str(table[i][0])+"</td><td>"+str(table[i][1])+"</td><td>"+str(table[i][2])+"</td><td>"+str(table[i][3])+"&#x0002F;"+str(n_expected)+"&nbsp;<font color='"+color+"'>&#x00028;"+str(fraction)[0:5]+"&#x00029;</font>"+"</td><td><a href='"+self.output_url+"failed_"+tasktype+"_list.html'><font color='red'>"+str(table[i][4])+"</font></a></td><td>"+str(table[i][5])+"</td></tr>"
                loc=locals()
                cmd='df = self.df_'+tasktype
                exec(cmd)
                df=loc['df']
                ind=np.where(df['state'] ==4)[0]
                ##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                # Create new html pages to list failed exposures. 
                # Add Modal 20191007
                ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                strFailed=self._initialize_page()
                # Add failed exposure tables 
                strFailed=strFailed+"<h2>Failed "+tasktype+"</h2><table id='c'><tr><th>Name</th></tr>"
                for j in range(len(ind)):
                    name=str(df['name'][ind[j]])
                    strFailed=strFailed+"<tr><td>"+name+"</td><td><button id='Btn"+str(j)+"'>Show Log</button></td></tr>"
                strFailed=strFailed+"</table>"
                # Add modals
                for j in range(len(ind)):
                    name=str(df['name'][ind[j]])
                    if tasktype == "spectra" or tasktype == "redshift":
                        parts=name.split('_')
                        logfile=self.log_dir+'/healpix/'+parts[2][0:3]+'/'+parts[2]+'/'+name+'.log'
                    else:
                        parts=name.split('_')
                        night=parts[1]
                        logfile=self.log_dir+'/night/'+night+'/'+name+'.log'
                    try:
                        f_log=open(logfile,"r")
                        log=f_log.read()
                        f_log.close()
                    except:
                        log="Can not find log file "+logfile

                    strFailed=strFailed+"""
                    <!-- The Modal -->
                    <div id='modal"""+str(j)+"""' class='modal'>
                       <!-- Modal content -->
                       <div class='modal-content'>
                          <span class='close' id='span"""+str(j)+"""'>&times;</span>
                         <p><pre>"""+log+"""</pre></p>
                       </div>
                    </div>"""



                strFailed=strFailed+self._add_js_script2(len(ind))
                hs=open(self.output_dir+"failed_"+tasktype+"_list.html",'w')
                hs.write(strFailed)
                hs.close()
            strTable=strTable+str_row
        strTable=strTable+"</table>"
        return strTable

    def _add_js_script1(self):
        s="""<script>
            var coll = document.getElementsByClassName('collapsible');
            var i;
            for (i = 0; i < coll.length; i++) {
                coll[i].nextElementSibling.style.maxHeight='0px';
                coll[i].addEventListener('click', function() {
                    this.classList.toggle('active');
                    var content = this.nextElementSibling;
                    if (content.style.maxHeight){
                       content.style.maxHeight = null;
                    } else {
                      content.style.maxHeight = '0px';
                            } 
                    });
             };
             var b1 = document.getElementById('b1');
             b1.addEventListener('click',function() {
                 for (i = 0; i < coll.length; i++) {
                     coll[i].nextElementSibling.style.maxHeight=null;
                                                   }});
             var b2 = document.getElementById('b2');
             b2.addEventListener('click',function() {
                 for (i = 0; i < coll.length; i++) {
                     coll[i].nextElementSibling.style.maxHeight='0px'
                             }});
            </script>"""
        return s

    def _add_js_script2(self,n_modal):
        s="""<script>"""
        for i in range(n_modal):
            s=s+"""
                var modal"""+str(i)+""" = document.getElementById('modal"""+str(i)+"""');
                var l"""+str(i)+""" = document.getElementById('Btn"""+str(i)+"""');

                l"""+str(i)+""".addEventListener('click',function() {
                  modal"""+str(i)+""".style.display = "block";
                })

                span"""+str(i)+""".addEventListener('click',function() {
                  modal"""+str(i)+""".style.display = "none";
                })"""

        s=s+"""</script>"""
        return s



    def what_night_is_it(self):
        d = datetime.datetime.utcnow() - datetime.timedelta(7/24+0.5)
        tonight = int(d.strftime('%Y%m%d'))
        return tonight

    def find_newexp(self,night, fileglob, known_exposures):
        datafiles = sorted(glob.glob(fileglob))
        newexp = list()
        for filepath in datafiles:
            expid = int(os.path.basename(os.path.dirname(filepath)))
            if (night, expid) not in known_exposures:
                newexp.append( (night, expid) )
        return set(newexp)
    def check_running(self):
        a=psutil.process_iter()
        running='No'
        for p in a:
            if 'desi_dailyproc' in ' '.join(p.cmdline()):
                running='Yes'
        return running

        
if __name__=="__main__":
    process=DESI_PROC_DASHBOARD()
